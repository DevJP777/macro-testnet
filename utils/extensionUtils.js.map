{"version":3,"sources":["sourceMap"],"names":["Exstensions","constructor","_0xb51fb4","_0x3279bc","_0xafc98e","_0x4f7b90","_0x41e8f6","Promise","_0x295e72","_0x3b313b","_0x322bd5","setTimeout","Error","_0x14a976","_0x6e12b","clearTimeout","_0x38da81","_0x1581c8","_0xdf3d44","console","_0x1b61d7","_0x2ed382","_0x205d0b","_0x4f897c","_0x30f2db","_0x13dc40","_0x245e1d","_0x53bb52","_0x983581","_0x243c6f","_0x59deb7","_0x2b6c73","_0x298331","_0x1a08e3","_0x15d374","module"],"mappings":"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","sourcesContent":["class Exstensions {\r\n\tconstructor() {}\r\n\t//   async getExtensionPage(browser, page = 'ui', timeout = 10000) {\r\n\t//     let extId\r\n\t//     let extPage\r\n\t//     return new Promise((resolve, reject) => {\r\n\t//         let timeoutId;\r\n\r\n\t//         // Set up a timeout to reject the promise if no page is found\r\n\t//         timeoutId = setTimeout(() => reject(new Error('Extensions popup not found within the timeout period')), timeout);\r\n\r\n\t//         browser.on('targetcreated', async target => {\r\n\t//             try {\r\n\t//                 if (target.url().startsWith(`chrome-extension://${extId}/${page}.html`)) {\r\n\t//                     const page = await target.page();\r\n\t//                     clearTimeout(timeoutId); // Clear timeout once we have the page\r\n\t//                     resolve(page);\r\n\t//                 } else if (!extId && target.url().startsWith(`chrome-extension://`)) {\r\n\t//                     const AnyExtID = target.url().split('/')[2];\r\n\t//                     const extPages = target.url().split('/')[3];\r\n\t//                     const cleanExtPage = extPages.replace('.html', '');\r\n\t//                     extId = AnyExtID;\r\n\t//                     extPage = cleanExtPage.split('#')[0];\r\n\t//                     console.log(`Extension ID: ${extId} and Page: ${extPage}`);\r\n\t//                     const page = await target.page();\r\n\t//                     clearTimeout(timeoutId); // Clear timeout once we have the page\r\n\t//                     resolve(page);\r\n\t//                 }else{\r\n\t//                     const page = await target.page();\r\n\t//                     clearTimeout(timeoutId); // Clear timeout once we have the page\r\n\t//                     resolve(page);\r\n\t//                 }\r\n\t//             } catch (e) {\r\n\t//                 clearTimeout(timeoutId); // Clear timeout in case of an error\r\n\t//                 reject(e);\r\n\t//             }\r\n\t//         });\r\n\t//     });\r\n\t//   }\r\n\tasync getExtensionPage(browser, page = 'ui', timeout = 30000) {\r\n\t\tlet extId\r\n\t\tlet extPage\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet timeoutId\r\n\r\n\t\t\t// Set up a timeout to reject the promise if no page is found\r\n\t\t\ttimeoutId = setTimeout(() => reject(new Error('Extensions popup not found within the timeout period')), timeout)\r\n\r\n\t\t\tbrowser.on('targetcreated', async (target) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Jika halaman yang sesuai ditemukan\r\n\t\t\t\t\tif (target.url().startsWith(`chrome-extension://${extId}/${page}.html`)) {\r\n\t\t\t\t\t\tconst extPageInstance = await target.page() // Gunakan variabel berbeda untuk halaman\r\n\t\t\t\t\t\tclearTimeout(timeoutId) // Clear timeout setelah menemukan halaman\r\n\t\t\t\t\t\tresolve(extPageInstance)\r\n\t\t\t\t\t} else if (!extId && target.url().startsWith(`chrome-extension://`)) {\r\n\t\t\t\t\t\tconst AnyExtID = target.url().split('/')[2]\r\n\t\t\t\t\t\tconst extPages = target.url().split('/')[3]\r\n\t\t\t\t\t\tconst cleanExtPage = extPages.replace('.html', '')\r\n\t\t\t\t\t\textId = AnyExtID\r\n\t\t\t\t\t\tconsole.log(`Extension ID: ${extId} and Page: ${extPages}`)\r\n\t\t\t\t\t\tconst extPageInstance = await target.page() // Gunakan variabel berbeda\r\n\t\t\t\t\t\tclearTimeout(timeoutId) // Clear timeout setelah menemukan halaman\r\n\t\t\t\t\t\tresolve(extPageInstance)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Jika halaman tidak cocok dengan yang diinginkan, resolve dengan halaman apapun\r\n\t\t\t\t\t\tconst extPageInstance = await target.page()\r\n\t\t\t\t\t\tclearTimeout(timeoutId) // Clear timeout setelah menemukan halaman\r\n\t\t\t\t\t\tresolve(extPageInstance)\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tclearTimeout(timeoutId) // Clear timeout jika terjadi error\r\n\t\t\t\t\treject(e)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tasync confirmSignature(ExtPage) {\r\n\t\tconst signatureRequestHeader = await ExtPage.waitForSelector(\r\n\t\t\t'.transition.no-underline.outline-none.group.flex.flex-row.flex-nowrap.items-center.justify-center.gap-2.cursor-pointer.text-body.font-semibold.max-w-full.min-w-0.w-full.defined-bg-81D8CF.defined-06061.border-none.hover\\:defined-bg-81D8CF.hover\\:text-steel-darker.focus\\:defined-bg-81D8CF.focus\\:text-steel-dark\\/70.active\\:text-steel-dark\\/70.visited\\:text-steel-darkest.disabled\\:bg-hero-darkest\\/5.disabled\\:text-steel\\/50.h-10.px-5',\r\n\t\t)\r\n\t\tconst headerText = await signatureRequestHeader.evaluate((el) => el.textContent.trim())\r\n\t\t// Verifikasi teks header\r\n\t\tif (headerText === 'Reject') {\r\n\t\t\tconsole.log('Teks header \"Reject\" ditemukan dan sesuai.')\r\n\t\t\tawait ExtPage.waitForSelector('[data-testid=\"confirm-footer-button\"]')\r\n\t\t\tawait ExtPage.click('[data-testid=\"confirm-footer-button\"]')\r\n\t\t\t// await metaMaskPage.waitForNavigation();\r\n\t\t} else {\r\n\t\t\tconsole.error('Teks header tidak sesuai.')\r\n\t\t}\r\n\t}\r\n\tasync unlockExtension(ExtensionPage, defSelector = '', password) {\r\n\t\ttry {\r\n\t\t\t// Tunggu hingga elemen input password muncul\r\n\t\t\tlet unlock = await ExtensionPage.waitForSelector(defSelector !== '' ? defSelector : '[data-testid=\"unlock-password\"]', {\r\n\t\t\t\ttimeout: 2000,\r\n\t\t\t})\r\n\t\t\tif (unlock) {\r\n\t\t\t\t// Masukkan password ke dalam input\r\n\t\t\t\tawait ExtensionPage.type('[data-testid=\"unlock-password\"]', password, {\r\n\t\t\t\t\tdelay: 100,\r\n\t\t\t\t})\r\n\t\t\t\t// Tunggu hingga tombol \"Unlock\" muncul dan klik untuk membuka MetaMask\r\n\t\t\t\tawait ExtensionPage.waitForSelector('[data-testid=\"unlock-submit\"]', {\r\n\t\t\t\t\ttimeout: 2000,\r\n\t\t\t\t})\r\n\t\t\t\tawait ExtensionPage.click('[data-testid=\"unlock-submit\"]')\r\n\t\t\t}\r\n\t\t\tconst element = await ExtensionPage.waitForSelector(\r\n\t\t\t\t'p.mm-box.mm-text.mm-text--body-md.mm-text--text-align-left.mm-box--color-text-default',\r\n\t\t\t\t{ timeout: 3000 },\r\n\t\t\t)\r\n\t\t\t// Ambil teks dari elemen dan periksa apakah sama dengan yang diharapkan\r\n\t\t\tconst textContent = await element.evaluate((el) => el.textContent.trim())\r\n\t\t\tif (textContent === 'See your accounts and suggest transactions') {\r\n\t\t\t\t// console.log('MetaMask berhasil dibuka dan teksnya sesuai.');\r\n\t\t\t\tawait ExtensionPage.click('[data-testid=\"confirm-btn\"]')\r\n\t\t\t\t// await ExtensionPage.close();\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error('Teks pada halaman MetaMask tidak sesuai.')\r\n\t\t\t\t//await ExtensionPage.close();\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Gagal membuka MetaMask:', error)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = Exstensions // Ekspor kelas MetaMask"]}