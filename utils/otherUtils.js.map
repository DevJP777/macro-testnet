{"version":3,"sources":["sourceMap"],"names":["fs","require","path","generateDotTrickEmails","_0x1daf94","_0x273bd6","_0x48bc8c","Error","_0x18e3da","_0x2f4828","_0xd7b84a","Set","_0x224d45","_0x2dc404","_0x1f8555","_0x3b5b1a","_0x58a1ef","_0xa2a6a6","_0x5d5963","_0x39dccc","Array","saveEmailsToFile","_0x47ebd2","_0x4a7b29","_0xb93439","_0x1be0bd","_0x1f9187","__dirname","_0x8ea871","_0x24b6ec","console","repeatTextFromPattern","_0x525be6","_0x32f342","_0x2e41a1","_0x97995e","_0x2fc576","parseInt","getInputFromBulkFile","_0x3c1690","_0x4947a1","_0x3d12ea","_0x42f5c7","_0x4e3b0f","_0x28d1d0","_0x9d14cf","_0x8eb6bf","_0x4d2066","_0x4ca9f8","_0x489e4c","_0x3c7af0","_0x382d4f","_0x390294","_0x540611","_0x8acb05","_0x18890f","_0x1c168e","_0x4f48eb","_0x302c9d","_0xf67336","_0x1439b7","module"],"mappings":"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","sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\n\r\nfunction generateDotTrickEmails(email, jumlah) {\r\n\t// Validasi format email menggunakan regular expression\r\n\tconst regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\r\n\tif (!regex.test(email)) {\r\n\t\tthrow new Error('Alamat email tidak valid.')\r\n\t}\r\n\r\n\t// Pisahkan email menjadi bagian lokal (sebelum @) dan domain (setelah @)\r\n\tconst [localPart, domain] = email.split('@')\r\n\r\n\t// Membuat set untuk menyimpan variasi email unik (untuk menghindari duplikasi)\r\n\tconst emailVariations = new Set()\r\n\r\n\t// Fungsi untuk menghasilkan variasi dengan menambahkan titik\r\n\tconst generateVariations = (str) => {\r\n\t\tconst result = []\r\n\r\n\t\tconst helper = (start, current) => {\r\n\t\t\tif (start === str.length) {\r\n\t\t\t\tresult.push(current) // Menambahkan variasi final\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// Menyimpan karakter saat ini tanpa menambahkan titik\r\n\t\t\thelper(start + 1, current + str[start])\r\n\r\n\t\t\t// Menambahkan titik sebelum karakter saat ini dan melanjutkan\r\n\t\t\thelper(start + 1, current + '.' + str[start])\r\n\t\t}\r\n\r\n\t\thelper(0, '') // Memulai fungsi rekursif\r\n\t\treturn result\r\n\t}\r\n\r\n\t// Menghasilkan variasi untuk bagian lokal\r\n\tconst localVariations = generateVariations(localPart)\r\n\r\n\t// Menambahkan domain ke setiap variasi dan menyimpannya dalam set untuk menghindari duplikasi\r\n\tlocalVariations.forEach((variation) => {\r\n\t\temailVariations.add(variation + '@' + domain)\r\n\t})\r\n\r\n\t// Mengembalikan hanya sejumlah variasi sesuai dengan parameter 'jumlah'\r\n\treturn Array.from(emailVariations).slice(0, jumlah)\r\n}\r\n\r\nfunction saveEmailsToFile(baseEmail, jumlah) {\r\n\t// Hasilkan variasi email\r\n\tconst variations = generateDotTrickEmails(baseEmail, jumlah)\r\n\r\n\t// Ambil nama file dari bagian lokal email (sebelum @)\r\n\tconst localPart = baseEmail.split('@')[0]\r\n\r\n\t// Dapatkan path folder 'data' di root direktori proyek\r\n\tconst folderPath = path.resolve(__dirname, '..', 'data')\r\n\r\n\t// Pastikan folder 'data' ada, jika tidak buat folder baru\r\n\tif (!fs.existsSync(folderPath)) {\r\n\t\tfs.mkdirSync(folderPath, { recursive: true }) // Menambahkan { recursive: true } untuk memastikan folder dibuat jika belum ada\r\n\t}\r\n\r\n\t// Tentukan nama file berdasarkan bagian lokal email\r\n\tconst fileName = path.join(folderPath, `${baseEmail}.txt`)\r\n\r\n\t// Gabungkan variasi email menjadi satu string, dipisahkan dengan newline\r\n\tconst emailContent = variations.join('\\n')\r\n\r\n\t// Tulis hasil ke dalam file\r\n\tfs.writeFileSync(fileName, emailContent, 'utf8')\r\n\r\n\tconsole.log(`Variasi email telah disimpan di ${fileName}`)\r\n}\r\n\r\nfunction repeatTextFromPattern(input) {\r\n\t// Regex yang diperbarui untuk menangkap Nama+Angka (opsional) diikuti angka dalam kurung [repeatCount]\r\n\tconst regex = /([A-Za-z]+(?:\\d+)?)(\\[(\\d+)\\])/ // Menangkap nama, bisa dengan angka dan repeatCount dalam kurung\r\n\tconst match = input.match(regex)\r\n\r\n\tif (match) {\r\n\t\tconst nameWithNumber = match[1] // Bagian nama dengan angka (misalnya \"Diagram\" atau \"Dontfindme26\")\r\n\t\tconst repeatCount = parseInt(match[3], 10) // Angka pengulangan yang ada dalam kurung, misalnya 10\r\n\r\n\t\t// Jika angka pengulangan lebih dari 0, lakukan pengulangan\r\n\t\tif (repeatCount > 0) {\r\n\t\t\t// Mengulang 'nameWithNumber' sebanyak repeatCount kali, dan memisahkan tiap pengulangan dengan newline\r\n\t\t\treturn Array(repeatCount).fill(nameWithNumber).join('\\n')\r\n\t\t} else {\r\n\t\t\treturn nameWithNumber // Jika tidak ada pengulangan, kembalikan nama saja\r\n\t\t}\r\n\t}\r\n\r\n\t// Jika tidak ada pola yang cocok, kembalikan input apa adanya\r\n\treturn input\r\n}\r\n\r\n// Fungsi untuk membaca password dari file dan memproses sesuai dengan pola\r\nfunction getInputFromBulkFile(sourceFilePath, indexProfile) {\r\n\ttry {\r\n\t\t// Mengatasi full path atau relative path\r\n\t\tconst fullPath = path.isAbsolute(sourceFilePath) ? sourceFilePath : path.join(__dirname, '../data', sourceFilePath)\r\n\r\n\t\t// Membaca file secara sinkron\r\n\t\tconst fileContent = fs.readFileSync(fullPath, 'utf-8')\r\n\r\n\t\t// Memecah konten file berdasarkan baris\r\n\t\tconst lines = fileContent.split('\\n')\r\n\r\n\t\tlet input = lines[indexProfile] // Password dari baris yang ditentukan oleh indexProfile\r\n\t\tlet repeatInput = null\r\n\r\n\t\t// Memeriksa apakah baris mengandung pola yang sesuai untuk pengulangan\r\n\t\tif (input) {\r\n\t\t\t// Jika pola ditemukan (contoh: \"Dontfindme26[3]\"), proses pengulangan\r\n\t\t\trepeatInput = repeatTextFromPattern(input.trim())\r\n\t\t}\r\n\r\n\t\t// Jika ditemukan repeatPassword, ganti semua password setelahnya dengan repeatPassword\r\n\t\tif (repeatInput) {\r\n\t\t\tconst repeatLines = repeatInput.split('\\n') // Pisahkan berdasarkan newline\r\n\t\t\tfor (let i = 0; i < repeatLines.length; i++) {\r\n\t\t\t\tlines[indexProfile + i] = repeatLines[i] // Ganti baris sesuai pengulangan\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Gabungkan kembali semua baris setelah pengulangan\r\n\t\tconst result = lines.join('\\n')\r\n\r\n\t\t// Menyimpan kembali hasil ke dalam file\r\n\t\tfs.writeFileSync(fullPath, result, 'utf-8')\r\n\t\t//console.log('File updated successfully.',lines[indexProfile].trim());\r\n\r\n\t\t// Kembalikan password sesuai dengan indexProfile setelah perubahan\r\n\t\treturn lines[indexProfile].trim()\r\n\t} catch (error) {\r\n\t\tthrow new Error(`Error reading bulk password file: ${error.message}`)\r\n\t}\r\n}\r\n\r\nfunction getInputFromBulkFile(sourceFilePath, indexProfile) {\r\n\ttry {\r\n\t\t// Mengatasi full path atau relative path\r\n\t\tlet fullPath\r\n\t\tif (path.isAbsolute(sourceFilePath)) {\r\n\t\t\t// Jika path sudah absolute, gunakan langsung\r\n\t\t\tfullPath = sourceFilePath\r\n\t\t} else {\r\n\t\t\t// Jika relative, pastikan path dimulai dari direktori proyek (root), misalnya:\r\n\t\t\tfullPath = path.resolve(__dirname, '..', sourceFilePath)\r\n\t\t}\r\n\r\n\t\t// Membaca file secara sinkron\r\n\t\tconst fileContent = fs.readFileSync(fullPath, 'utf-8')\r\n\r\n\t\t// Memecah konten file berdasarkan baris\r\n\t\tconst lines = fileContent.split('\\n')\r\n\r\n\t\tlet input = lines[indexProfile] // Mendapatkan input dari baris yang ditentukan oleh indexProfile\r\n\t\tlet repeatInput = null\r\n\r\n\t\t// Memeriksa apakah baris mengandung pola yang sesuai untuk pengulangan\r\n\t\tif (input) {\r\n\t\t\t// Jika pola ditemukan (contoh: \"Dontfindme26[3]\"), proses pengulangan\r\n\t\t\trepeatInput = repeatTextFromPattern(input.trim())\r\n\t\t}\r\n\r\n\t\t// Jika ditemukan repeatInput, ganti semua password setelahnya dengan repeatInput\r\n\t\tif (repeatInput) {\r\n\t\t\tconst repeatLines = repeatInput.split('\\n') // Pisahkan berdasarkan newline\r\n\t\t\tfor (let i = 0; i < repeatLines.length; i++) {\r\n\t\t\t\tlines[indexProfile + i] = repeatLines[i] // Ganti baris sesuai pengulangan\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Gabungkan kembali semua baris setelah pengulangan\r\n\t\tconst result = lines.join('\\n')\r\n\r\n\t\t// Menyimpan kembali hasil ke dalam file\r\n\t\tfs.writeFileSync(fullPath, result, 'utf-8')\r\n\t\t//console.log('File updated successfully.',lines[indexProfile].trim());\r\n\r\n\t\t// Kembalikan input yang sesuai dengan indexProfile setelah perubahan\r\n\t\treturn lines[indexProfile].trim()\r\n\t} catch (error) {\r\n\t\tthrow new Error(`Error reading bulk password file: ${error.message}`)\r\n\t}\r\n}\r\nmodule.exports = {\r\n\tgenerateDotTrickEmails,\r\n\tgetInputFromBulkFile,\r\n\tsaveEmailsToFile,\r\n}"]}