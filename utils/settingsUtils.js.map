{"version":3,"sources":["sourceMap"],"names":["fs","require","path","prompts","loadSettings","_0x939228","_0x5a036d","_0x51d325","_0x757657","_0x5ae741","_0x5cb5ad","_0x2f6de9","console","process","validatePath","_0x909f66","_0x1e039d","validateUserDataPath","_0x26b798","getProfiles","_0x41f9cd","_0x25df96","_0x2f5690","_0x4a6e96","_0x3d68ed","parseInt","_0x584b82","_0x385a72","_0x2dc597","_0x3843dd","_0x15297f","_0x433343","_0x436b36","_0x2df41b","_0x3beab5","_0x2a67c7","_0x408ae8","_0xd226a9","_0x67d11","getExtensions","_0x5ab556","_0x40b860","_0x577a97","_0x45896b","_0x4c26e2","_0x24976b","_0x432ac2","_0x5dbf9b","JSON","_0xf601f3","_0x2bdaf1","_0x4eb6c3","_0x4126d2","_0x31d6c5","loadCommands","_0x2b175d","_0x63ff53","repeatTextFromPattern","_0x1c3649","_0x37a107","_0x51c586","_0x4479a3","_0x24429d","Array","getPasswordFromBulkFile","_0x59d3af","_0x27149d","_0x2aba53","__dirname","_0x145a64","_0x1fb8f7","_0x4d31e0","_0x268c6c","_0x2f4823","_0x253405","_0x3b6458","_0x1e521e","Error","module"],"mappings":"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","sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\nconst prompts = require('@inquirer/prompts')\r\n\r\n// Fungsi untuk membaca settings dari file\r\nfunction loadSettings(filePath) {\r\n\tconst settings = {}\r\n\tif (fs.existsSync(filePath)) {\r\n\t\tconst lines = fs.readFileSync(filePath, 'utf-8').split('\\n')\r\n\t\tlines.forEach((line) => {\r\n\t\t\tconst [key, value] = line.split('=').map((part) => part.trim())\r\n\t\t\tif (key && value) {\r\n\t\t\t\tsettings[key] = value\r\n\t\t\t}\r\n\t\t})\r\n\t} else {\r\n\t\tconsole.error(`Settings file not found: ${filePath}`)\r\n\t\tprocess.exit(1)\r\n\t}\r\n\treturn settings\r\n}\r\n\r\n// Validasi apakah file path valid\r\nfunction validatePath(filePath, description) {\r\n\tif (!fs.existsSync(filePath)) {\r\n\t\tconsole.error(`${description} is invalid or does not exist: ${filePath}`)\r\n\t\tprocess.exit(1)\r\n\t}\r\n}\r\n\r\n// Validasi apakah user data path valid\r\nfunction validateUserDataPath(userDataPath) {\r\n\tif (!fs.existsSync(userDataPath)) {\r\n\t\tconsole.error(`User data path is invalid or does not exist: ${userDataPath}`)\r\n\t\tprocess.exit(1)\r\n\t}\r\n\r\n\tif (!fs.lstatSync(userDataPath).isDirectory()) {\r\n\t\tconsole.error(`User data path is not a directory: ${userDataPath}`)\r\n\t\tprocess.exit(1)\r\n\t}\r\n}\r\n\r\nasync function getProfiles() {\r\n\ttry {\r\n\t\t// Menentukan userDataPath berdasarkan OS\r\n\t\tconst isWindows = process.platform === 'win32'\r\n\t\tconst userDataPath = isWindows\r\n\t\t\t? path.join(process.env.LOCALAPPDATA, 'Google', 'Chrome', 'User Data')\r\n\t\t\t: path.join(process.env.HOME, 'Library', 'Application Support', 'Google', 'Chrome')\r\n\r\n\t\tif (!fs.existsSync(userDataPath)) {\r\n\t\t\tconsole.log('Chrome user data folder tidak ditemukan di sistem Anda.')\r\n\t\t\treturn []\r\n\t\t}\r\n\r\n\t\t// Membaca semua profil dan memfilter hanya yang sesuai\r\n\t\tconst profiles = fs\r\n\t\t\t.readdirSync(userDataPath)\r\n\t\t\t.filter((folder) => /^Profile \\d+$/.test(folder)) // Hanya ambil Profile X\r\n\t\t\t.map((folder) => ({\r\n\t\t\t\tfolder,\r\n\t\t\t\tfullPath: path.join(userDataPath, folder),\r\n\t\t\t\tnumber: parseInt(folder.replace('Profile ', ''), 10),\r\n\t\t\t}))\r\n\t\t\t.sort((a, b) => a.number - b.number)\r\n\t\t\t.map((profile) => profile.fullPath)\r\n\r\n\t\tif (profiles.length === 0) {\r\n\t\t\tconsole.log('Tidak ada profil yang ditemukan.')\r\n\t\t\treturn []\r\n\t\t}\r\n\r\n\t\tconsole.log(`Ditemukan ${profiles.length} profil.`)\r\n\r\n\t\t// Menampilkan pilihan kepada pengguna\r\n\t\tconst choice = await prompts.select({\r\n\t\t\tmessage: 'Pilih opsi profile yg akan di jalankan:',\r\n\t\t\tchoices: [\r\n\t\t\t\t{ title: 'Masukkan Rentang (start-end)', value: 'range' },\r\n\t\t\t\t{ title: 'Semua Profil', value: 'all' },\r\n\t\t\t],\r\n\t\t\tpageSize: 10,\r\n\t\t\tloop: false,\r\n\t\t})\r\n\r\n\t\tif (choice === 'range') {\r\n\t\t\t// Jika memilih rentang, meminta input rentang profil\r\n\t\t\tconst range = await prompts.input({\r\n\t\t\t\tmessage: 'Masukkan rentang profil (misalnya 1-30):',\r\n\t\t\t\tvalidate(input) {\r\n\t\t\t\t\tconst rangeMatch = input.match(/^(\\d+)-(\\d+)$/)\r\n\t\t\t\t\tif (!rangeMatch) {\r\n\t\t\t\t\t\treturn 'Format rentang tidak valid. Harap masukkan format yang benar (start-end) contoh : 1-20'\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst start = parseInt(rangeMatch[1], 10)\r\n\t\t\t\t\tconst end = parseInt(rangeMatch[2], 10)\r\n\t\t\t\t\tif (start >= 1 && end <= profiles.length && start <= end) {\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 'Rentang tidak valid. Pastikan start < end dan dalam jangkauan profil.'\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\tconst rangeMatch = range.match(/^(\\d+)-(\\d+)$/)\r\n\t\t\tconst start = parseInt(rangeMatch[1], 10) - 1 // Mengubah start menjadi berbasis 0\r\n\t\t\tconst end = parseInt(rangeMatch[2], 10) // Indeks end sudah benar karena slice sudah exclusive pada end\r\n\r\n\t\t\t// Mengambil profil sesuai rentang\r\n\t\t\tconsole.log(profiles.slice(start, end))\r\n\t\t\treturn profiles.slice(start, end)\r\n\t\t} else if (choice === 'all') {\r\n\t\t\t// Jika memilih semua profil, kembalikan semua profil\r\n\t\t\treturn profiles\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.error(`Error reading profiles: ${error.message}`)\r\n\t\treturn []\r\n\t}\r\n}\r\n// async function getProfiles() {\r\n// \ttry {\r\n// \t\t// Menentukan userDataPath berdasarkan OS\r\n// \t\tconst isWindows = process.platform === 'win32'\r\n// \t\tconst userDataPath = isWindows\r\n// \t\t\t? path.join(process.env.LOCALAPPDATA, 'Google', 'Chrome', 'User Data')\r\n// \t\t\t: path.join(process.env.HOME, 'Library', 'Application Support', 'Google', 'Chrome')\r\n\r\n// \t\tif (!fs.existsSync(userDataPath)) {\r\n// \t\t\tconsole.log('Chrome user data folder tidak ditemukan di sistem Anda.')\r\n// \t\t\treturn []\r\n// \t\t}\r\n\r\n// \t\t// Membaca semua profil\r\n// \t\tconst profiles = fs\r\n// \t\t\t.readdirSync(userDataPath)\r\n// \t\t\t.filter((folder) => /^Profile \\d+$/.test(folder) || folder === 'Default' || folder === 'Guest Profile')\r\n// \t\t\t.map((folder) => ({\r\n// \t\t\t\tfolder,\r\n// \t\t\t\tfullPath: path.join(userDataPath, folder),\r\n// \t\t\t\tnumber: folder === 'Default' ? 0 : folder === 'Guest Profile' ? -1 : parseInt(folder.replace('Profile ', ''), 10),\r\n// \t\t\t}))\r\n// \t\t\t.sort((a, b) => a.number - b.number)\r\n// \t\t\t.map((profile) => profile.fullPath)\r\n\r\n// \t\tif (profiles.length === 0) {\r\n// \t\t\tconsole.log('Tidak ada profil yang ditemukan.')\r\n// \t\t\treturn []\r\n// \t\t}\r\n\r\n// \t\tconsole.log(`Ditemukan ${profiles.length} profil.`)\r\n\r\n// \t\t// Menampilkan pilihan kepada pengguna\r\n// \t\tconst choice = await prompts.select({\r\n// \t\t\tmessage: 'Pilih opsi profile yg akan di jalankan:',\r\n// \t\t\tchoices: [\r\n// \t\t\t\t{ title: 'Masukkan Rentang (start-end)', value: 'range' },\r\n// \t\t\t\t{ title: 'Semua Profil', value: 'all' },\r\n// \t\t\t],\r\n// \t\t\tpageSize: 10,\r\n// \t\t\tloop: false,\r\n// \t\t})\r\n\r\n// \t\tif (choice === 'range') {\r\n// \t\t\t// Jika memilih rentang, meminta input rentang profil\r\n// \t\t\tconst range = await prompts.input({\r\n// \t\t\t\tmessage: 'Masukkan rentang profil (misalnya 1-30):',\r\n// \t\t\t\tvalidate(input) {\r\n// \t\t\t\t\tconst rangeMatch = input.match(/^(\\d+)-(\\d+)$/)\r\n// \t\t\t\t\tif (!rangeMatch) {\r\n// \t\t\t\t\t\treturn 'Format rentang tidak valid. Harap masukkan format yang benar (start-end) contoh : 1-20'\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\tconst start = parseInt(rangeMatch[1], 10)\r\n// \t\t\t\t\tconst end = parseInt(rangeMatch[2], 10)\r\n// \t\t\t\t\tif (start >= 1 && end <= profiles.length && start <= end) {\r\n// \t\t\t\t\t\treturn true\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\treturn 'Rentang tidak valid. Pastikan start < end dan dalam jangkauan profil.'\r\n// \t\t\t\t},\r\n// \t\t\t})\r\n\r\n// \t\t\tconst rangeMatch = range.match(/^(\\d+)-(\\d+)$/)\r\n// \t\t\tconst start = parseInt(rangeMatch[1], 10) - 1 // Mengubah start menjadi berbasis 0\r\n// \t\t\tconst end = parseInt(rangeMatch[2], 10) // Indeks end sudah benar karena slice sudah exclusive pada end\r\n\r\n// \t\t\t// Mengambil profil sesuai rentang\r\n// \t\t\tconsole.log(profiles.slice(start, end))\r\n// \t\t\treturn profiles.slice(start, end)\r\n// \t\t} else if (choice === 'all') {\r\n// \t\t\t// Jika memilih semua profil, kembalikan semua profil\r\n// \t\t\treturn profiles\r\n// \t\t}\r\n// \t} catch (error) {\r\n// \t\tconsole.error(`Error reading profiles: ${error.message}`)\r\n// \t\treturn []\r\n// \t}\r\n// }\r\n\r\n// async function getProfiles(userDataPath) {\r\n// \ttry {\r\n// \t\t// Membaca semua profil\r\n// \t\tconst profiles = fs\r\n// \t\t\t.readdirSync(userDataPath)\r\n// \t\t\t.filter((folder) => /^Profile \\d+$/.test(folder))\r\n// \t\t\t.map((folder) => ({\r\n// \t\t\t\tfolder,\r\n// \t\t\t\tfullPath: path.join(userDataPath, folder),\r\n// \t\t\t\tnumber: parseInt(folder.replace('Profile ', ''), 10),\r\n// \t\t\t}))\r\n// \t\t\t.sort((a, b) => a.number - b.number)\r\n// \t\t\t.map((profile) => profile.fullPath)\r\n\r\n// \t\tif (profiles.length === 0) {\r\n// \t\t\tconsole.log('Tidak ada profil yang ditemukan.')\r\n// \t\t\treturn []\r\n// \t\t}\r\n\r\n// \t\tconsole.log(`Ditemukan ${profiles.length} profil.`)\r\n\r\n// \t\t// Menampilkan pilihan kepada pengguna dengan @inquirer/prompts\r\n// \t\tconst choice = await prompts.select({\r\n// \t\t\tmessage: 'Pilih opsi profile yg akan di jalankan:',\r\n// \t\t\tchoices: [\r\n// \t\t\t\t{ title: 'Masukkan Rentang (start-end)', value: 'range' },\r\n// \t\t\t\t{ title: 'Semua Profil', value: 'all' },\r\n// \t\t\t],\r\n// \t\t\tpageSize: 10, // Menentukan jumlah item yang ditampilkan dalam satu halaman\r\n// \t\t\tloop: false, // Menentukan apakah pilihan bisa diulang jika keluar dari pilihan\r\n// \t\t})\r\n\r\n// \t\tif (choice === 'range') {\r\n// \t\t\t// Jika memilih rentang, meminta input rentang profil\r\n// \t\t\tconst range = await prompts.input({\r\n// \t\t\t\tmessage: 'Masukkan rentang profil (misalnya 1-30):',\r\n// \t\t\t\tvalidate(input) {\r\n// \t\t\t\t\tconst rangeMatch = input.match(/^(\\d+)-(\\d+)$/)\r\n// \t\t\t\t\tif (!rangeMatch) {\r\n// \t\t\t\t\t\treturn 'Format rentang tidak valid. Harap masukkan format yang benar (start-end) contoh : 1-20'\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\tconst start = parseInt(rangeMatch[1], 10)\r\n// \t\t\t\t\tconst end = parseInt(rangeMatch[2], 10)\r\n// \t\t\t\t\tif (start >= 1 && end <= profiles.length && start <= end) {\r\n// \t\t\t\t\t\treturn true\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\treturn 'Rentang tidak valid. Pastikan start < end dan dalam jangkauan profil.'\r\n// \t\t\t\t},\r\n// \t\t\t})\r\n\r\n// \t\t\tconst rangeMatch = range.match(/^(\\d+)-(\\d+)$/)\r\n// \t\t\tconst start = parseInt(rangeMatch[1], 10) - 1 // Mengubah start menjadi berbasis 0\r\n// \t\t\tconst end = parseInt(rangeMatch[2], 10) // Indeks end sudah benar karena slice sudah exclusive pada end\r\n\r\n// \t\t\t// Mengambil profil sesuai rentang\r\n// \t\t\tconsole.log(profiles.slice(start, end))\r\n// \t\t\treturn profiles.slice(start, end)\r\n// \t\t} else if (choice === 'all') {\r\n// \t\t\t// Jika memilih semua profil, kembalikan semua profil\r\n// \t\t\treturn profiles\r\n// \t\t}\r\n// \t} catch (error) {\r\n// \t\tconsole.error(`Error reading profiles: ${error.message}`)\r\n// \t\treturn []\r\n// \t}\r\n// }\r\n\r\n// Fungsi untuk mendapatkan ekstensi dari profil tertentu\r\nfunction getExtensions(profilePath) {\r\n\tconst extensionsDir = path.join(profilePath, 'extensions')\r\n\tlet extensions = []\r\n\tconst excludedExtensionId = 'nmmhkkegccagdldgiimedpiccmgmieda'\r\n\r\n\tif (fs.existsSync(extensionsDir)) {\r\n\t\tconst subdirs = fs.readdirSync(extensionsDir)\r\n\t\tfor (const subdir of subdirs) {\r\n\t\t\tconst extPath = path.join(extensionsDir, subdir)\r\n\t\t\ttry {\r\n\t\t\t\tif (fs.existsSync(path.join(extPath, 'manifest.json'))) {\r\n\t\t\t\t\tconst manifest = JSON.parse(fs.readFileSync(path.join(extPath, 'manifest.json'), 'utf-8'))\r\n\t\t\t\t\tif (manifest.id !== excludedExtensionId) {\r\n\t\t\t\t\t\textensions.push(extPath.replace(/\\\\/g, '/'))\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst deeperDirs = fs.readdirSync(extPath).map((d) => path.join(extPath, d))\r\n\t\t\t\t\tfor (const deeperDir of deeperDirs) {\r\n\t\t\t\t\t\tif (fs.existsSync(path.join(deeperDir, 'manifest.json'))) {\r\n\t\t\t\t\t\t\tconst manifest = JSON.parse(fs.readFileSync(path.join(deeperDir, 'manifest.json'), 'utf-8'))\r\n\t\t\t\t\t\t\tif (manifest.id !== excludedExtensionId) {\r\n\t\t\t\t\t\t\t\textensions.push(deeperDir.replace(/\\\\/g, '/'))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`Error reading extensions in ${extPath}: ${error.message}`)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn extensions\r\n}\r\n\r\nfunction loadCommands(filePath) {\r\n\treturn fs\r\n\t\t.readFileSync(filePath, 'utf-8')\r\n\t\t.split('\\n')\r\n\t\t.filter((line) => line.trim() !== '')\r\n}\r\n\r\nfunction repeatTextFromPattern(password) {\r\n\t// Regex yang diperbarui untuk menangkap Nama+Angka (opsional) diikuti angka dalam kurung [repeatCount]\r\n\tconst regex = /([A-Za-z]+(?:\\d+)?)(\\[(\\d+)\\])/ // Menangkap nama, bisa dengan angka dan repeatCount dalam kurung\r\n\tconst match = password.match(regex)\r\n\r\n\tif (match) {\r\n\t\tconst nameWithNumber = match[1] // Bagian nama dengan angka (misalnya \"Diagram\" atau \"Dontfindme26\")\r\n\t\tconst repeatCount = parseInt(match[3], 10) // Angka pengulangan yang ada dalam kurung, misalnya 10\r\n\r\n\t\t// Jika angka pengulangan lebih dari 0, lakukan pengulangan\r\n\t\tif (repeatCount > 0) {\r\n\t\t\t// Mengulang 'nameWithNumber' sebanyak repeatCount kali, dan memisahkan tiap pengulangan dengan newline\r\n\t\t\treturn Array(repeatCount).fill(nameWithNumber).join('\\n')\r\n\t\t} else {\r\n\t\t\treturn nameWithNumber // Jika tidak ada pengulangan, kembalikan nama saja\r\n\t\t}\r\n\t}\r\n\r\n\t// Jika tidak ada pola yang cocok, kembalikan password apa adanya\r\n\treturn password\r\n}\r\n\r\n// Fungsi untuk membaca password dari file dan memproses sesuai dengan pola\r\nfunction getPasswordFromBulkFile(sourceFilePath, indexProfile) {\r\n\ttry {\r\n\t\t// Mengatasi full path atau relative path\r\n\t\tconst fullPath = path.isAbsolute(sourceFilePath) ? sourceFilePath : path.join(__dirname, '..', sourceFilePath)\r\n\r\n\t\t// Membaca file secara sinkron\r\n\t\tconst fileContent = fs.readFileSync(fullPath, 'utf-8')\r\n\r\n\t\t// Memecah konten file berdasarkan baris\r\n\t\tconst lines = fileContent.split('\\n')\r\n\r\n\t\tlet password = lines[indexProfile] // Password dari baris yang ditentukan oleh indexProfile\r\n\t\tlet repeatPassword = null\r\n\r\n\t\t// Memeriksa apakah baris mengandung pola yang sesuai untuk pengulangan\r\n\t\tif (password) {\r\n\t\t\t// Jika pola ditemukan (contoh: \"Dontfindme26[3]\"), proses pengulangan\r\n\t\t\trepeatPassword = repeatTextFromPattern(password.trim())\r\n\t\t}\r\n\r\n\t\t// Jika ditemukan repeatPassword, ganti semua password setelahnya dengan repeatPassword\r\n\t\tif (repeatPassword) {\r\n\t\t\tconst repeatLines = repeatPassword.split('\\n') // Pisahkan berdasarkan newline\r\n\t\t\tfor (let i = 0; i < repeatLines.length; i++) {\r\n\t\t\t\tlines[indexProfile + i] = repeatLines[i] // Ganti baris sesuai pengulangan\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Gabungkan kembali semua baris setelah pengulangan\r\n\t\tconst result = lines.join('\\n')\r\n\r\n\t\t// Menyimpan kembali hasil ke dalam file\r\n\t\tfs.writeFileSync(fullPath, result, 'utf-8')\r\n\t\t//console.log('File updated successfully.',lines[indexProfile].trim());\r\n\r\n\t\t// Kembalikan password sesuai dengan indexProfile setelah perubahan\r\n\t\treturn lines[indexProfile].trim()\r\n\t} catch (error) {\r\n\t\tthrow new Error(`Error reading bulk password file: ${error.message}`)\r\n\t}\r\n}\r\n\r\nmodule.exports = {\r\n\tloadSettings,\r\n\tvalidatePath,\r\n\tvalidateUserDataPath,\r\n\tgetProfiles,\r\n\tgetExtensions,\r\n\tloadCommands,\r\n\tgetPasswordFromBulkFile,\r\n}"]}