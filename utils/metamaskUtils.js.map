{"version":3,"sources":["sourceMap"],"names":["MetaMask","constructor","_0xf4f319","_0x5759ab","_0x3a28d8","_0x4e55a1","Promise","_0x343b3f","_0x5d20c1","_0xede776","setTimeout","Error","_0x21ce41","_0x134421","clearTimeout","_0x35e0b4","console","_0x320a1b","_0x3d4a22","_0x2d311","_0x34572e","_0x414a63","_0x2728e6","_0x513b85","_0x2ea05c","_0x4e0952","_0xdbdac7","_0x13bc66","_0x4a7ac5","_0x197165","module"],"mappings":"k1DAAA,MAAMA,QAAS,CACdC,WAAA,E,EACA,M,mBAAA,EAAsBC,SAAtB,CAA+BC,SAAA,C,mBAA/B,CAAsDC,SAAA,C,MAAtD,C,CACC,IAAIC,SAAJ,C,OACO,IAAIC,OAAJ,CAAY,CAACC,SAAD,CAAUC,SAAV,G,4BAClB,IAAIC,SAAJ,CAGAA,SAAA,CAAYC,UAAA,CAAW,IAAMF,SAAA,CAAO,IAAIG,KAAJ,C,yEAAA,CAAP,CAAjB,CAA0FP,SAA1F,C,CAEZF,SAAA,C,IAAA,E,gBAAA,CAA4B,MAAOU,SAAP,E,2BAC3B,G,IACKA,SAAA,C,KAAA,I,gBAAA,E,iBAA8CP,S,KAASF,S,iBAAvD,C,EACH,MAAMU,SAAA,CAAO,MAAMD,SAAA,C,MAAA,GAAnB,CACAE,YAAA,CAAaL,SAAb,C,CACAF,SAAA,CAAQM,SAAR,C,UACU,CAACR,SAAD,EAAUO,SAAA,C,gBAAA,I,gBAAA,E,gBAAA,C,EACpB,MAAMG,SAAA,CAAgBH,SAAA,C,gBAAA,I,OAAA,E,GAAA,E,GAAA,CAAtB,CACAP,SAAA,CAAQU,S,CAERC,OAAA,C,gBAAA,E,iBAA6BX,SAA7B,CAFA,CAGA,MAAMY,SAAA,CAAO,MAAML,SAAA,C,gBAAA,GAAnB,CACAE,YAAA,CAAaL,SAAb,C,CACAF,SAAA,CAAQU,SAAR,C,IAEA,MAAOC,SAAP,C,CACDJ,YAAA,CAAaL,SAAb,C,CACAD,SAAA,CAAOU,SAAP,C,GAjBF,C,EANM,C,EA4BR,M,mBAAA,EAAuBC,QAAvB,C,8BACOC,SAAA,CAAyB,MAAMD,QAAA,C,gBAAA,E,+LAAA,C,CAG/BE,SAAA,CAAa,MAAMD,SAAA,C,gBAAA,EAAiCE,SAAD,EAAQA,SAAA,C,gBAAA,E,gBAAA,GAAxC,C,CAErBD,SAAA,G,kBACHL,OAAA,C,KAAA,E,+EAAA,C,CACA,MAAMG,QAAA,C,gBAAA,E,gBAAA,C,CACN,MAAMA,QAAA,C,OAAA,E,gBAAA,C,EAGNH,OAAA,C,gBAAA,E,gBAAA,C,EAGF,M,gBAAA,EAAqBO,SAArB,CAAmCC,SAAnC,C,8BACC,G,CAEC,IAAIC,SAAA,CAAS,MAAMF,SAAA,C,gBAAA,E,gBAAA,CAAgE,C,SAAE,C,KAAF,CAAhE,CAAnB,CACIE,S,GAEH,MAAMF,SAAA,C,gBAAA,E,gBAAA,CAAqDC,SAArD,CAA+D,C,OACpE,C,IADoE,CAA/D,C,CAIN,MAAMD,SAAA,C,gBAAA,E,gBAAA,CAA8D,C,SACnE,C,KADmE,CAA9D,C,CAGN,MAAMA,SAAA,C,gBAAA,E,gBAAA,C,EAEP,MAAMG,SAAA,CAAU,MAAMH,SAAA,C,gBAAA,E,gBAAA,CAErB,C,SAAE,C,KAAF,CAFqB,CAAtB,CAKMI,SAAA,CAAc,MAAMD,SAAA,C,gBAAA,EAAkBE,SAAD,EAAQA,SAAA,C,gBAAA,E,gBAAA,GAAzB,CAL1B,CAMID,SAAA,G,iBAEH,MAAMJ,SAAA,C,OAAA,E,gBAAA,C,CAGNP,OAAA,C,gBAAA,E,gBAAA,C,EAGA,MAAOa,SAAP,C,CACDb,OAAA,C,gBAAA,E,gBAAA,CAAuCa,SAAvC,C,GA7EY,CAkFfC,MAAA,C,mBAAA,EAAiB9B,QAAjB","sourcesContent":["class MetaMask {\r\n\tconstructor() {}\r\n\tasync getMetaMaskPage(browser, page = 'notification', timeout = 10000) {\r\n\t\tlet extId\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet timeoutId\r\n\r\n\t\t\t// Set up a timeout to reject the promise if no page is found\r\n\t\t\ttimeoutId = setTimeout(() => reject(new Error('MetaMask popup not found within the timeout period')), timeout)\r\n\r\n\t\t\tbrowser.on('targetcreated', async (target) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (target.url().startsWith(`chrome-extension://${extId}/${page}.html`)) {\r\n\t\t\t\t\t\tconst page = await target.page()\r\n\t\t\t\t\t\tclearTimeout(timeoutId) // Clear timeout once we have the page\r\n\t\t\t\t\t\tresolve(page)\r\n\t\t\t\t\t} else if (!extId && target.url().startsWith(`chrome-extension://`)) {\r\n\t\t\t\t\t\tconst metaMaskExtID = target.url().split('/')[2]\r\n\t\t\t\t\t\textId = metaMaskExtID\r\n\r\n\t\t\t\t\t\tconsole.log(`Extension ID: ${extId}`)\r\n\t\t\t\t\t\tconst page = await target.page()\r\n\t\t\t\t\t\tclearTimeout(timeoutId) // Clear timeout once we have the page\r\n\t\t\t\t\t\tresolve(page)\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tclearTimeout(timeoutId) // Clear timeout in case of an error\r\n\t\t\t\t\treject(e)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\tasync confirmSignature(metaMaskPage) {\r\n\t\tconst signatureRequestHeader = await metaMaskPage.waitForSelector(\r\n\t\t\t'#app-content > div > div > div > div > div.mm-box.mm-box--width-full.mm-box--height-full.mm-box--background-color-background-alternative > div > h2',\r\n\t\t)\r\n\t\tconst headerText = await signatureRequestHeader.evaluate((el) => el.textContent.trim())\r\n\t\t// Verifikasi teks header\r\n\t\tif (headerText === 'Signature request') {\r\n\t\t\tconsole.log('Teks header \"Signature request\" ditemukan dan sesuai.')\r\n\t\t\tawait metaMaskPage.waitForSelector('[data-testid=\"confirm-footer-button\"]')\r\n\t\t\tawait metaMaskPage.click('[data-testid=\"confirm-footer-button\"]')\r\n\t\t\t// await metaMaskPage.waitForNavigation();\r\n\t\t} else {\r\n\t\t\tconsole.error('Teks header tidak sesuai.')\r\n\t\t}\r\n\t}\r\n\tasync unlockMetaMask(metaMaskPage, password) {\r\n\t\ttry {\r\n\t\t\t// Tunggu hingga elemen input password muncul\r\n\t\t\tlet unlock = await metaMaskPage.waitForSelector('[data-testid=\"unlock-password\"]', { timeout: 2000 })\r\n\t\t\tif (unlock) {\r\n\t\t\t\t// Masukkan password ke dalam input\r\n\t\t\t\tawait metaMaskPage.type('[data-testid=\"unlock-password\"]', password, {\r\n\t\t\t\t\tdelay: 100,\r\n\t\t\t\t})\r\n\t\t\t\t// Tunggu hingga tombol \"Unlock\" muncul dan klik untuk membuka MetaMask\r\n\t\t\t\tawait metaMaskPage.waitForSelector('[data-testid=\"unlock-submit\"]', {\r\n\t\t\t\t\ttimeout: 2000,\r\n\t\t\t\t})\r\n\t\t\t\tawait metaMaskPage.click('[data-testid=\"unlock-submit\"]')\r\n\t\t\t}\r\n\t\t\tconst element = await metaMaskPage.waitForSelector(\r\n\t\t\t\t'p.mm-box.mm-text.mm-text--body-md.mm-text--text-align-left.mm-box--color-text-default',\r\n\t\t\t\t{ timeout: 3000 },\r\n\t\t\t)\r\n\t\t\t// Ambil teks dari elemen dan periksa apakah sama dengan yang diharapkan\r\n\t\t\tconst textContent = await element.evaluate((el) => el.textContent.trim())\r\n\t\t\tif (textContent === 'See your accounts and suggest transactions') {\r\n\t\t\t\t// console.log('MetaMask berhasil dibuka dan teksnya sesuai.');\r\n\t\t\t\tawait metaMaskPage.click('[data-testid=\"confirm-btn\"]')\r\n\t\t\t\t// await metaMaskPage.close();\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error('Teks pada halaman MetaMask tidak sesuai.')\r\n\t\t\t\t//await metaMaskPage.close();\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Gagal membuka MetaMask:', error)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = MetaMask // Ekspor kelas MetaMask"]}