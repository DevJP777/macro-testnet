{"version":3,"sources":["sourceMap"],"names":["exec","require","runADBCommand","_0xcc9863","Promise","_0x102a68","_0x53583f","_0x6ca770","_0x5e6af9","_0x1a6c9b","mapCommandToADBAction","_0x52278f","Error","runCommands","_0x11c26e","_0x317384","_0x5f1f72","_0x313c1a","_0x5d138d","isNaN","console","_0x44c908","_0x28dd80","startAdbProcess","_0x15078e","_0x4b87d3","starthotspotProcess","_0x514aa3","_0x2d1120","module"],"mappings":"wkBA6FA,MAAM,CAAEA,IAAF,EAAWC,OAAA,C,kBAAA,CAAjB,CAGA,SAASC,aAAT,CAAuBC,SAAvB,C,QACQ,IAAIC,OAAJ,CAAY,CAACC,SAAD,CAAUC,SAAV,G,CAClBN,IAAA,CAAKG,SAAL,CAAc,CAACI,SAAD,CAAQC,SAAR,CAAgBC,SAAhB,G,2BACTF,S,CACHD,SAAA,C,iBAAmCG,SAAnC,C,CAEAJ,SAAA,CAAQG,SAAR,C,EAJF,C,EADM,C,EAYR,SAASE,qBAAT,CAA+BC,SAA/B,C,6BACC,OAAQA,SAAR,EACC,I,YAAA,CACC,O,gBAAA,CACD,K,gBAAA,CACC,O,gBAAA,CACD,K,gBAAA,CACC,O,gBAAA,CACD,K,gBAAA,CACC,O,gBAAA,CACD,K,gBAAA,CACC,O,gBAAA,CACD,I,MAAA,CACC,O,gBAAA,CACD,K,gBAAA,CACC,O,gBAAA,CACD,K,gBAAA,CACC,M,yCAAA,CACD,I,IAAA,CACC,O,gBAAA,CACD,QACC,MAAM,IAAIC,KAAJ,C,iBAAmCD,SAAnC,CAAN,CApBF,C,CAyBD,eAAeE,WAAf,CAA2BC,SAA3B,C,6BACC,IAAK,IAAIC,SAAA,C,GAAJ,CAAWA,SAAA,CAAID,SAAA,C,gBAAA,CAApB,CAAqCC,SAAA,EAArC,C,CACC,G,CACC,MAAMC,SAAA,CAAUF,SAAA,CAASC,SAAT,CAAhB,C,GAGI,OAAOC,SAAP,G,gBAAA,EAA+BA,SAAA,C,YAAA,E,OAAA,C,EAClC,MAAM,CAACC,SAAD,CAAOC,SAAP,EAAeF,SAAA,C,gBAAA,E,GAAA,CAArB,CACIC,SAAA,G,gBAAA,EAAmB,CAACE,KAAA,CAAMD,SAAN,C,EAEvBE,OAAA,C,gBAAA,E,iBAA2BF,S,SAA3B,C,CACA,MAAMhB,aAAA,C,iBAAiCgB,SAAA,C,KAAjC,C,EAENE,OAAA,C,KAAA,E,iBAA0CJ,SAA1C,C,UAES,OAAOA,SAAP,G,UAEV,MAAMK,SAAA,CAAaX,qBAAA,CAAsBM,SAAtB,CAAnB,CACA,MAAMd,aAAA,CAAcmB,SAAd,C,OAEND,OAAA,C,gBAAA,E,iBAA6CJ,SAA7C,C,GAEA,MAAOM,SAAP,C,CACDF,OAAA,C,gBAAA,E,iBAA0CN,SAAA,CAASC,SAAT,CAA1C,CAAyDO,SAAzD,C,GAGFF,OAAA,C,gBAAA,E,gBAAA,C,o3CAGD,eAAeG,eAAf,CAA+BC,SAA/B,C,6BACC,G,CACC,MAAMX,WAAA,CAAYW,SAAZ,C,EACL,MAAOC,SAAP,C,CACDL,OAAA,C,gBAAA,E,gBAAA,CAAyCK,SAAzC,C,GAGF,eAAeC,mBAAf,E,6BACOC,SAAA,CAAW,C,SAAA,C,gBAAA,C,gBAAA,C,gBAAA,C,OAAA,C,gBAAA,C,WAAA,C,gBAAA,C,gBAAA,C,CAWjB,G,CACC,MAAMd,WAAA,CAAYc,SAAZ,C,EACL,MAAOC,SAAP,C,CACDR,OAAA,C,gBAAA,E,gBAAA,CAAyCQ,SAAzC,C,GAKFC,MAAA,C,kBAAA,EAAiB,C,iBAAE,CAAAN,eAAF,C,qBAAmB,CAAAG,mBAAnB,CAAjB","sourcesContent":["// // tetheringHelper.js\r\n\r\n// const { exec } = require('child_process');\r\n\r\n// // Fungsi untuk menjalankan perintah adb shell\r\n// function runADBCommand(command) {\r\n//     return new Promise((resolve, reject) => {\r\n//         exec(command, (error, stdout, stderr) => {\r\n//             if (error) {\r\n//                 reject(`Error executing command: ${stderr}`);\r\n//             } else {\r\n//                 resolve(stdout);\r\n//             }\r\n//         });\r\n//     });\r\n// }\r\n\r\n// // Fungsi untuk menerjemahkan perintah seperti 'hotspot', 'enter', dll.\r\n// function mapCommandToADBAction(command) {\r\n//     switch (command) {\r\n//         case `wait:${command}`:\r\n//             return `adb shell sleep ${command}`;\r\n//         case 'airplaneon':\r\n//             return 'adb shell cmd connectivity airplane-mode enable';\r\n//         case 'airplaneoff':\r\n//             return 'adb shell cmd connectivity airplane-mode disable';\r\n//         case 'hotspot':\r\n//             return 'adb shell am start -n com.android.settings/.TetherSettings$TetherSettingsActivity';  // Membuka pengaturan hotspot\r\n//         case 'enter':\r\n//             return 'adb shell input keyevent 66';  // Menekan tombol 'Enter'\r\n//         case 'back':\r\n//             return 'adb shell input keyevent 4';  // Tombol 'Back'\r\n//         case 'home':\r\n//             return 'adb shell input keyevent 3';  // Tombol 'Home'\r\n//         case 'down':\r\n//             return 'adb shell input keyevent 20';  // Tombol 'Down'\r\n//         case 'up':\r\n//             return 'adb shell input keyevent 19';  // Tombol 'Up'\r\n//         default:\r\n//             throw new Error(`Unrecognized command: ${command}`);\r\n//     }\r\n// }\r\n\r\n// // Fungsi untuk menjalankan array perintah secara berurutan\r\n// async function runCommands(commands) {\r\n//     for (let i = 0; i < commands.length; i++) {\r\n//         try {\r\n//             const command = commands[i];\r\n\r\n//             // Cek jika perintah adalah 'wait:<durasi>'\r\n//             if (typeof command === 'string' && command.startsWith('wait:')) {\r\n//                 const [wait,time] = command.split(':')\r\n//                 if (wait === 'wait') {\r\n//                     await runADBCommand()\r\n//                 } else {\r\n//                     console.log(`invalid argumen ${command}`);\r\n//                 }\r\n//             } else if (typeof command === 'string') {\r\n//                 // Menerjemahkan dan menjalankan perintah berdasarkan input\r\n//                 const adbCommand = mapCommandToADBAction(command);\r\n//                 await runADBCommand(adbCommand);\r\n//             } else {\r\n//                 console.warn(`Unrecognized command format: ${command}`);\r\n//             }\r\n\r\n//         } catch (error) {\r\n//             console.error(`Error executing command: ${commands[i]}`, error);\r\n//         }\r\n//     }\r\n//     console.log('All commands executed successfully!');\r\n// }\r\n\r\n// async function startAdbProcess(commands) {\r\n//     // const commands = [\r\n//     //     'hotspot',      // Membuka pengaturan Hotspot\r\n//     //     'enter',        // Menekan tombol Enter\r\n//     //     'wait:3000',    // Menunggu selama 3000ms (3 detik)\r\n//     //     'down',         // Menekan tombol Down\r\n//     //     'up',           // Menekan tombol Up\r\n//     //     'wait:2000',    // Menunggu selama 2000ms (2 detik)\r\n//     //     'enter'         // Menekan tombol Enter lagi\r\n//     // ];\r\n\r\n//     try {\r\n//         await runCommands(commands);\r\n//     } catch (error) {\r\n//         console.error('Error during execution:', error);\r\n//     }\r\n// }\r\n\r\n// // Ekspor fungsi agar dapat digunakan di file lain\r\n// module.exports = { startAdbProcess };\r\n\r\nconst { exec } = require('child_process')\r\n\r\n// Fungsi untuk menjalankan perintah adb shell\r\nfunction runADBCommand(command) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\texec(command, (error, stdout, stderr) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(`Error executing command: ${stderr}`)\r\n\t\t\t} else {\r\n\t\t\t\tresolve(stdout)\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n}\r\n\r\n// Fungsi untuk menerjemahkan perintah seperti 'hotspot', 'enter', dll.\r\nfunction mapCommandToADBAction(command) {\r\n\tswitch (command) {\r\n\t\tcase 'airplaneon':\r\n\t\t\treturn 'adb shell cmd connectivity airplane-mode enable'\r\n\t\tcase 'airplaneoff':\r\n\t\t\treturn 'adb shell cmd connectivity airplane-mode disable'\r\n\t\tcase 'hotspot':\r\n\t\t\treturn 'adb shell am start -n com.android.settings/.TetherSettings$TetherSettingsActivity' // Membuka pengaturan hotspot\r\n\t\tcase 'stophotspot':\r\n\t\t\treturn 'adb shell am force-stop com.android.settings/.TetherSettings$TetherSettingsActivity' // menutup pengaturan hotspot\r\n\t\tcase 'enter':\r\n\t\t\treturn 'adb shell input keyevent 66' // Menekan tombol 'Enter'\r\n\t\tcase 'back':\r\n\t\t\treturn 'adb shell input keyevent 4' // Tombol 'Back'\r\n\t\tcase 'home':\r\n\t\t\treturn 'adb shell input keyevent 3' // Tombol 'Home'\r\n\t\tcase 'down':\r\n\t\t\treturn 'adb shell input keyevent 20' // Tombol 'Down'\r\n\t\tcase 'up':\r\n\t\t\treturn 'adb shell input keyevent 19' // Tombol 'Up'\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unrecognized command: ${command}`)\r\n\t}\r\n}\r\n\r\n// Fungsi untuk menjalankan array perintah secara berurutan\r\nasync function runCommands(commands) {\r\n\tfor (let i = 0; i < commands.length; i++) {\r\n\t\ttry {\r\n\t\t\tconst command = commands[i]\r\n\r\n\t\t\t// Cek jika perintah adalah 'wait:<durasi>'\r\n\t\t\tif (typeof command === 'string' && command.startsWith('wait:')) {\r\n\t\t\t\tconst [wait, time] = command.split(':')\r\n\t\t\t\tif (wait === 'wait' && !isNaN(time)) {\r\n\t\t\t\t\t// Menggunakan perintah adb shell sleep untuk menunggu durasi dalam milidetik\r\n\t\t\t\t\tconsole.log(`Waiting for ${time} ms`)\r\n\t\t\t\t\tawait runADBCommand(`adb shell sleep ${time / 1000}`) // Mengkonversi ms ke detik\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(`Invalid argument for wait: ${command}`)\r\n\t\t\t\t}\r\n\t\t\t} else if (typeof command === 'string') {\r\n\t\t\t\t// Menerjemahkan dan menjalankan perintah berdasarkan input\r\n\t\t\t\tconst adbCommand = mapCommandToADBAction(command)\r\n\t\t\t\tawait runADBCommand(adbCommand)\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(`Unrecognized command format: ${command}`)\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`Error executing command: ${commands[i]}`, error)\r\n\t\t}\r\n\t}\r\n\tconsole.log('All commands executed successfully!')\r\n}\r\n\r\nasync function startAdbProcess(commands) {\r\n\ttry {\r\n\t\tawait runCommands(commands)\r\n\t} catch (error) {\r\n\t\tconsole.error('Error during execution:', error)\r\n\t}\r\n}\r\nasync function starthotspotProcess() {\r\n\tconst commands = [\r\n\t\t'hotspot',\r\n\t\t'airplaneon',\r\n\t\t'wait:3000',\r\n\t\t'airplaneoff',\r\n\t\t'enter',\r\n\t\t'enter',\r\n\t\t'wait:1000',\r\n\t\t'enter',\r\n\t\t'stophotspot',\r\n\t]\r\n\ttry {\r\n\t\tawait runCommands(commands)\r\n\t} catch (error) {\r\n\t\tconsole.error('Error during execution:', error)\r\n\t}\r\n}\r\n\r\n// Ekspor fungsi agar dapat digunakan di file lain\r\nmodule.exports = { startAdbProcess, starthotspotProcess }"]}